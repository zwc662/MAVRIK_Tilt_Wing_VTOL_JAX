import os
import sys
import jax.numpy as jnp
from jax import random
import pytest
from jax_mavrik.mavrik import Mavrik
from jax_mavrik.mavrik_setup import MavrikSetup
from jax_mavrik.mavrik_types import StateVariables, ControlInputs
 
  
vned_values = jnp.array([
    [30, 0, 0],
    [29.9567831389439, -3.51941250302366e-06, -0.0997440875497484],
    [29.9143319093421, -2.65331234960644e-05, -0.192173207312324],
    [29.8729570058881, -8.60412192498947e-05, -0.276696983958294],
    [29.8329056575015, -0.000196640193682423, -0.352861721876711],
    [29.7943581170556, -0.000370459490889988, -0.420343306828564],
    [29.757427693988, -0.000617183036355058, -0.478940011871429],
    [29.7221638122189, -0.000944149475741599, -0.528565283937904],
    [29.688557528394, -0.0013565245378527, -0.569240493527057],
    [29.6565489261357, -0.00185753848333228, -0.601087571252145],
    [29.6260623279978, -0.00244881552688928, -0.624332119435012]
])
xned_values = jnp.array([
    [0, 0, 0],
    [0.299783361083777, -6.02131409639952e-09, -0.000504926271198009],
    [0.599138125787749, -1.32242856460296e-07, -0.00197120666908661],
    [0.898073548096571, -6.60121205960179e-07, -0.00432262440835172],
    [1.19660167630974, -2.02917406886849e-06, -0.00747774872119746],
    [1.49473669792436, -4.81256085066663e-06, -0.0113512661469204],
    [1.79249426747521, -9.69245846637498e-06, -0.0158552402957767],
    [2.08989085022707, -1.74360506970816e-05, -0.0209002995985304],
    [2.38694310917852, -2.88728853524693e-05, -0.0263967528150926],
    [2.68366735706981, -4.48742856752311e-05, -0.0322556315761922],
    [2.98007917527787, -6.63355318758375e-05, -0.038389693693777]
])
euler_values = jnp.array([
    [0, 0.0698131700797732, 0],
    [-3.83102680062787e-05, 0.069027550273576, 9.04912420146763e-07],
    [-0.000153552072954416, 0.0667545746314907, 4.04379266341417e-06],
    [-0.000346324277547203, 0.0631250471696481, 1.04563106233839e-05],
    [-0.000617444272821253, 0.0582769141614382, 2.17223772942477e-05],
    [-0.000967960790681804, 0.0523530362858272, 3.98915019931493e-05],
    [-0.00139917382096866, 0.0454990840088095, 6.74119828350537e-05],
    [-0.00191265923584729, 0.037861569344814, 0.000107062180078206],
    [-0.00251029603504916, 0.0295860239493667, 0.000161885829038088],
    [-0.00319429452677804, 0.0208153308552569, 0.00023513299654499],
    [-0.00396730839598052, 0.0116881337865728, 0.000330210433969084]
])

dcm_values = jnp.array([
    [[0.997564050259824, 0, -0.0697564737441253],
     [0, 1, 0],
     [0.0697564737441253, 0, 0.997564050259824]],

    [[0.997618543741988, -3.82190337974867e-05, -0.0689727462221143],
     [3.8372682291554e-05, 0.999999999263361, 9.02757411463207e-07],
     [0.0689727461368038, -3.54727681173338e-06, 0.99761854447367]],

    [[0.997772728892127, -0.000153210072062912, -0.0667050073520098],
     [0.000153821813565908, 0.999999988161285, 4.0347860884043e-06],
     [0.0667050059441383, -1.42864847307365e-05, 0.997772740646831]],

    [[0.998008215871425, -0.000345634488166369, -0.0630831323725712],
     [0.000346983887392833, 0.999999939746639, 1.04354845354693e-05],
     [0.0630831249647371, -3.2303529802549e-05, 0.998008275667675]],

    [[0.998302190878637, -0.000616396048634007, -0.0582439330988611],
     [0.000618709429892039, 0.999999808364172, 2.16855009758966e-05],
     [0.0582439085703797, -5.76847537768049e-05, 0.998302380938218]],

    [[0.998629424943671, -0.000966634429662038, -0.0523291243434447],
     [0.00097004812514636, 0.999999528709719, 3.98368463475195e-05],
     [0.0523290611735698, -9.05440159195021e-05, 0.998629891981245]],

    [[0.998964117400584, -0.00139772535325718, -0.0454833871859625],
     [0.00140223948357805, 0.999999014594243, 6.73422178015324e-05],
     [0.0454832482404458, -0.00013105106052893, 0.998965092961269]],

    [[0.99928150857961, -0.00191128733726218, -0.0378525242430893],
     [0.00191671062506308, 0.999998157385549, 0.000106985452306516],
     [0.0378522500155409, -0.000179460919579114, 0.999283330673808]],

    [[0.999559216105274, -0.00250919480762391, -0.0295817078686759],
     [0.00251508220987494, 0.999996824083651, 0.000161814981510342],
     [0.0295812078943349, -0.000236144083270791, 0.99956235242004]],

    [[0.999778268173431, -0.0031935971120001, -0.0208138277503381],
     [0.00319918299898061, 0.999994854969047, 0.000235082057240932],
     [0.020812969905171, -0.000301617175949578, 0.999783341184882]],

    [[0.999923825321829, -0.00396702700061673, -0.0116878676642502],
     [0.00397115719783872, 0.999992060411721, 0.000330187872793571],
     [0.0116864650031864, -0.000376577080640898, 0.999931640026173]]
])

pqr_values = jnp.array([
    [0., 0., 0.], 
    [-0.00768350180092004, -0.154989823766882, 0.000184719739060439], 
    [-0.0154202999868224, -0.297333196758844, 0.000410217650372161],
    [-0.0232339425294841, -0.42620080412076, 0.000705520892845865],
    [-0.0311468587913183, -0.540991832053583, 0.0010989658870791],
    [-0.0391808881509318, -0.641322449431708, 0.00161827128996843],
    [-0.0473578390965414, -0.727012792362713, 0.00229062400935634],
    [-0.0557000558782673, -0.798072801821959, 0.0031427860994394],
    [-0.0642309728030263, -0.854687205567505, 0.00420122736840687],
    [-0.0729756393288125, -0.89719988398178, 0.00549228559351451],
    [-0.0819871990543792, -0.926122431019966, 0.00704303876561992]    
])

dotpqr_values = jnp.array([
    [0., 0., 0.],
    [-0.00768350180092004, -0.154989823766882, 0.000184719739060439],
    [-0.0154202999868224, -0.297333196758844, 0.000410217650372161],
    [-0.0232339425294841, -0.42620080412076, 0.000705520892845865],
    [-0.0311468587913183, -0.540991832053583, 0.0010989658870791],
    [-0.0391808881509318, -0.641322449431708, 0.00161827128996843],
    [-0.0473578390965414, -0.727012792362713, 0.00229062400935634],
    [-0.0557000558782673, -0.798072801821959, 0.0031427860994394],
    [-0.0642309728030263, -0.854687205567505, 0.00420122736840687],
    [-0.0729756393288125, -0.89719988398178, 0.00549228559351451],
    [-0.0819871990543792, -0.926122431019966, 0.00704303876561992]
])

vb_values = jnp.array([
    [29.9269, 0, 2.0927], [29.8923, -0.0001, 1.9667], [29.8605, -0.0004, 1.8037],
    [29.8309, -0.0010, 1.6083], [29.8028, -0.0017, 1.3853], [29.7755, -0.0027, 1.1393],
    [29.7484, -0.0038, 0.8750], [29.7209, -0.0053, 0.5969], [29.6924, -0.0069, 0.3092],
    [29.6626, -0.0089, 0.0163], [29.6313, -0.0111, -0.2781]
])
ab_values = jnp.array([
    [-3.6179, 0, -10.5957], [-3.3106, -0.0213, -14.5262], [-3.0595, -0.0425, -17.9956],
    [-2.8740, -0.0638, -20.9965], [-2.7576, -0.0853, -23.5272], [-2.7093, -0.1073, -25.5916],
    [-2.7239, -0.1301, -27.1984], [-2.7932, -0.1543, -28.3612], [-2.9064, -0.1804, -29.0974],
    [-3.0515, -0.2090, -29.4287], [-3.2104, -0.2409, -29.3826]
])

forces_values = jnp.array([
    [-90.4479, 0, -264.8931], [-90.3843, -0.0160, -247.3303], [-89.8961, -0.0612, -227.9275],
    [-88.9870, -0.1344, -207.0631], [-87.6768, -0.2347, -185.1024], [-85.9998, -0.3614, -162.3944],
    [-84.0019, -0.5138, -139.2693], [-81.7374, -0.6915, -116.0362], [-79.2664, -0.8944, -92.9816],
    [-76.6521, -1.1221, -70.3684], [-73.8203, -1.3749, -48.4869]
])

moments_values = jnp.array([
    [-3.7189, -97.2170, 0.1650], [-3.7389, -89.8779, 0.1910], [-3.7709, -81.9669, 0.2476],
    [-3.8143, -73.6251, 0.3335], [-3.8688, -64.9871, 0.4480], [-3.9344, -56.1802, 0.5900],
    [-4.0113, -47.3234, 0.7588], [-4.0999, -38.5267, 0.9536], [-4.2011, -29.8911, 1.1739],
    [-4.3158, -21.5078, 1.4193], [-4.4712, -13.4886, 1.6910]
])

control_inputs = jnp.array([
        0.0, 0.0, 0.0,  # wing_tilt, tail_tilt, aileron
        0.0, 0.0, 0.0,  # elevator, flap, rudder
        7500.0, 7500.0,  # RPM_tailLeft, RPM_tailRight
        7500.0, 7500.0,  # RPM_leftOut1, RPM_left2
        7500.0, 7500.0,  # RPM_left3, RPM_left4
        7500.0, 7500.0,  # RPM_left5, RPM_left6In
        7500.0, 7500.0,  # RPM_right7In, RPM_right8
        7500.0, 7500.0,  # RPM_right9, RPM_right10
        7500.0, 7500.0   # RPM_right11, RPM_right12Out
    ])
 

@pytest.fixture
def mavrik():
    mavrik_setup = MavrikSetup(file_path=os.path.join(
        os.path.dirname(os.path.dirname(__file__)), "jax_mavrik/aero_export.mat")
    )
    return Mavrik(mavrik_setup=mavrik_setup, dt=0.01, method='RK4', fixed_step_size=0.01)

 
@pytest.mark.parametrize(
    "id, vned, xned, euler, vb, pqr, expected_forces, expected_moments, expected_vned, expected_xned, expected_euler, expected_vb, expected_pqr",
    zip(
        list(range(10)),
        vned_values[:-1], xned_values[:-1], euler_values[:-1], vb_values[:-1], pqr_values[:-1], 
        forces_values[:-1], moments_values[:-1], vned_values[1:], xned_values[1:], euler_values[1:], vb_values[1:], pqr_values[1:] 
    )    
)
  
def test_simulation_output(id, mavrik, vned, xned, euler, vb, pqr, \
                           expected_forces, expected_moments, expected_vned, expected_xned, expected_euler, expected_vb, expected_pqr):
    t = id
    state = jnp.array([*vned, *xned, *vb, *euler, *pqr, *expected_forces, *expected_moments])
    control = control_inputs

    print(f">>>>>>>>>>>>>>>>>>>> Test ID: {id} <<<<<<<<<<<<<<<<<<<<<<")    
    nxt_state, info = mavrik.step(state, control)
    nxt_vned = nxt_state[:3]
    nxt_xned = nxt_state[3:6]
    nxt_vb = nxt_state[6:9]
    nxt_euler = nxt_state[9:12]
    nxt_pqr = nxt_state[12:15]
    forces = nxt_state[15:18]
    moments = nxt_state[18:21]
    threshold = 0.001


    print(f"Ve Expected: {expected_vned}, Got: {nxt_vned}, Close: {jnp.allclose(expected_vned, nxt_vned, atol=threshold)}, Max Error: {jnp.max(jnp.abs(expected_vned - nxt_vned))}")
    print(f"Xe Expected: {expected_xned}, Got: {nxt_xned}, Close: {jnp.allclose(expected_xned, nxt_xned, atol=threshold)}, Max Error: {jnp.max(jnp.abs(expected_xned - nxt_xned))}")
    print(f"Vb Expected: {expected_vb}, Got: {nxt_vb}, Close: {jnp.allclose(expected_vb, nxt_vb, atol=threshold)}, Max Error: {jnp.max(jnp.abs(expected_vb - nxt_vb))}")
    print(f"Euler Expected: {expected_euler}, Got: {nxt_euler}, Close: {jnp.allclose(expected_euler, nxt_euler, atol=threshold)}, Max Error: {jnp.max(jnp.abs(expected_euler - nxt_euler))}")
    print(f"pqr Expected: {expected_pqr}, Got: {nxt_pqr}, Close: {jnp.allclose(expected_pqr, nxt_pqr, atol=threshold)}, Max Error: {jnp.max(jnp.abs(expected_pqr - nxt_pqr))}")
    print(f"Forces Expected: {expected_forces}, Got: {forces}, Close: {jnp.allclose(expected_forces, forces, atol=threshold)}, Max Error: {jnp.max(jnp.abs(expected_forces - forces))}")
    print(f"Moments Expected: {expected_moments}, Got: {moments}, Close: {jnp.allclose(expected_moments, moments, atol=threshold)}, Max Error: {jnp.max(jnp.abs(expected_moments - moments))}")